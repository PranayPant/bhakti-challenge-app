name: PR Closed - Bump Version and Tag

permissions:
  contents: write
  pull-requests: read

on:
  pull_request:
    types:
      - closed
    branches:
      - master

jobs:
  bump-version-and-tag:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout master branch
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get PR labels
        id: labels
        run: |
          echo "LABELS=$(gh pr view ${{ github.event.pull_request.number }} --json labels -q '.labels[].name' | jq -R -s -c 'split("\n") | map(select(length > 0))')" >> "$GITHUB_ENV"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version bump
        id: bump
        run: |
          VERSION_BUMP="patch"

          for label in $(echo $LABELS | jq -r '.[]'); do
            if [[ "$label" == "release:minor" ]]; then
              VERSION_BUMP="minor"
            elif [[ "$label" == "release:major" ]]; then
              VERSION_BUMP="major"
            fi
          done

          echo "bump_type=$VERSION_BUMP" >> $GITHUB_OUTPUT

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Bump expo.version in app.json
        id: bump_version
        run: |
          OLD_VERSION=$(jq -r '.expo.version' app.json)

          IFS='.' read -r major minor patch <<< "$OLD_VERSION"

          case "${{ steps.bump.outputs.bump_type }}" in
            patch) patch=$((patch + 1)) ;;
            minor) minor=$((minor + 1)); patch=0 ;;
            major) major=$((major + 1)); minor=0; patch=0 ;;
          esac

          NEW_VERSION="$major.$minor.$patch"

          jq ".expo.version = \"$NEW_VERSION\"" app.json > tmp.json && mv tmp.json app.json

          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and push version bump
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add app.json
          git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }}"
          git push origin master

      - name: Create Git tag
        run: |
          git tag "v${{ steps.bump_version.outputs.new_version }}"
          git push origin "v${{ steps.bump_version.outputs.new_version }}"

      - name: Generate GitHub Release with auto-notes
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
